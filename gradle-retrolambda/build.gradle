
buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.10.0"
    }
}

apply plugin: "com.gradle.plugin-publish"
apply plugin: 'maven-publish'
apply plugin: 'groovy'
apply plugin: 'signing'
apply plugin: 'idea'

Properties props = new Properties()
props.load(new FileInputStream("$projectDir/../gradle.properties"))
group = props['group']
version = props['version']
ext.androidPluginVersion = '4.0.2'

sourceCompatibility = '1.7'

repositories {
    maven { url 'https://maven.google.com' }
    jcenter()
    mavenCentral()
}

configurations {
    provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    provided "com.android.tools.build:gradle:$androidPluginVersion"

    testImplementation gradleTestKit()
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation "com.android.tools.build:gradle:$androidPluginVersion"
    testImplementation 'com.neenbedankt.gradle.plugins:android-apt:1.8'
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

// Taken from https://docs.gradle.org/current/userguide/test_kit.html
// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

// Add the classpath file to the test runtime classpath
dependencies {
    testRuntimeOnly files(createClasspathManifest)
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

pluginBundle {
    vcsUrl = 'https://github.com/evant/gradle-retrolambda.git'
    description = 'https://github.com/evant/gradle-retrolambda.git'
    tags = ['java', 'android', 'lambda']

    plugins {
        retrolambdaPlugin {
            id = 'me.tatarka.retrolambda'
            displayName = 'gradle-retrolambda'
        }
    }
}

publishing {
    publications {
        lib(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'gradle-retrolambda'
                description = 'A gradle plugin for getting java lambda support in java 6, 7 and android'
                url = 'https://github.com/evant/gradle-retrolambda'
                scm {
                    url = 'git@github.com:superyuuki/retrolambda-stripped.git'
                    connection = 'scm:git:git@github.com:evant/gradle-retrolambda.git'
                    developerConnection = 'scm:git:git@github.com:evant/gradle-retrolambda.git'
                }
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'evant'
                        name = 'Evan Tatarka'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                credentials {
                    username = "${usr}"
                    password = "${pwd}"
                }
            }

            if(rootProject.version.endsWith('-SNAPSHOT')) {
                url "https://repo.superyuuki.com/snapshots"
            } else {
                url "https://repo.superyuuki.com/releases"
            }
        }
    }
}

